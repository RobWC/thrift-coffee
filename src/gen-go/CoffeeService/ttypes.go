// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package CoffeeService

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Coffee struct {
	Name        string      `thrift:"name,1,required" json:"name"`
	Creamers    []*Creamer  `thrift:"creamers,2" json:"creamers"`
	Sweetners   []*Sweetner `thrift:"sweetners,3" json:"sweetners"`
	Size        *Size       `thrift:"size,4" json:"size"`
	Iced        bool        `thrift:"iced,5" json:"iced"`
	Temperature int32       `thrift:"temperature,6" json:"temperature"`
}

func NewCoffee() *Coffee {
	return &Coffee{}
}

func (p *Coffee) GetName() string {
	return p.Name
}

func (p *Coffee) GetCreamers() []*Creamer {
	return p.Creamers
}

func (p *Coffee) GetSweetners() []*Sweetner {
	return p.Sweetners
}

var Coffee_Size_DEFAULT Size

func (p *Coffee) GetSize() Size {
	if !p.IsSetSize() {
		return Coffee_Size_DEFAULT
	}
	return *p.Size
}

func (p *Coffee) GetIced() bool {
	return p.Iced
}

func (p *Coffee) GetTemperature() int32 {
	return p.Temperature
}
func (p *Coffee) IsSetSize() bool {
	return p.Size != nil
}

func (p *Coffee) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Coffee) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Coffee) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Creamer, 0, size)
	p.Creamers = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Creamer{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Creamers = append(p.Creamers, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Coffee) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Sweetner, 0, size)
	p.Sweetners = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Sweetner{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.Sweetners = append(p.Sweetners, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Coffee) ReadField4(iprot thrift.TProtocol) error {
	p.Size = &Size{}
	if err := p.Size.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Size, err)
	}
	return nil
}

func (p *Coffee) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Iced = v
	}
	return nil
}

func (p *Coffee) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Temperature = v
	}
	return nil
}

func (p *Coffee) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Coffee"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Coffee) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Coffee) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creamers", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:creamers: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Creamers)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Creamers {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:creamers: %s", p, err)
	}
	return err
}

func (p *Coffee) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sweetners", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:sweetners: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sweetners)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Sweetners {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:sweetners: %s", p, err)
	}
	return err
}

func (p *Coffee) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:size: %s", p, err)
	}
	if err := p.Size.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Size, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:size: %s", p, err)
	}
	return err
}

func (p *Coffee) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iced", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:iced: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Iced)); err != nil {
		return fmt.Errorf("%T.iced (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:iced: %s", p, err)
	}
	return err
}

func (p *Coffee) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("temperature", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:temperature: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Temperature)); err != nil {
		return fmt.Errorf("%T.temperature (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:temperature: %s", p, err)
	}
	return err
}

func (p *Coffee) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Coffee(%+v)", *p)
}

type Size struct {
	Name   string `thrift:"name,1,required" json:"name"`
	Ounces int32  `thrift:"ounces,2,required" json:"ounces"`
}

func NewSize() *Size {
	return &Size{}
}

func (p *Size) GetName() string {
	return p.Name
}

func (p *Size) GetOunces() int32 {
	return p.Ounces
}
func (p *Size) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Size) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Size) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Ounces = v
	}
	return nil
}

func (p *Size) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Size"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Size) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Size) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ounces", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ounces: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Ounces)); err != nil {
		return fmt.Errorf("%T.ounces (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ounces: %s", p, err)
	}
	return err
}

func (p *Size) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Size(%+v)", *p)
}

type Creamer struct {
	Name   string `thrift:"name,1,required" json:"name"`
	Flavor string `thrift:"flavor,2" json:"flavor"`
}

func NewCreamer() *Creamer {
	return &Creamer{}
}

func (p *Creamer) GetName() string {
	return p.Name
}

func (p *Creamer) GetFlavor() string {
	return p.Flavor
}
func (p *Creamer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Creamer) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Creamer) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Flavor = v
	}
	return nil
}

func (p *Creamer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Creamer"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Creamer) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Creamer) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flavor", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:flavor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Flavor)); err != nil {
		return fmt.Errorf("%T.flavor (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:flavor: %s", p, err)
	}
	return err
}

func (p *Creamer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Creamer(%+v)", *p)
}

type Sweetner struct {
	Name   string  `thrift:"name,1,required" json:"name"`
	Amount int32   `thrift:"amount,2,required" json:"amount"`
	Units  string  `thrift:"units,3,required" json:"units"`
	Flavor *string `thrift:"flavor,4" json:"flavor"`
}

func NewSweetner() *Sweetner {
	return &Sweetner{}
}

func (p *Sweetner) GetName() string {
	return p.Name
}

func (p *Sweetner) GetAmount() int32 {
	return p.Amount
}

func (p *Sweetner) GetUnits() string {
	return p.Units
}

var Sweetner_Flavor_DEFAULT string

func (p *Sweetner) GetFlavor() string {
	if !p.IsSetFlavor() {
		return Sweetner_Flavor_DEFAULT
	}
	return *p.Flavor
}
func (p *Sweetner) IsSetFlavor() bool {
	return p.Flavor != nil
}

func (p *Sweetner) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Sweetner) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Sweetner) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *Sweetner) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Units = v
	}
	return nil
}

func (p *Sweetner) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Flavor = &v
	}
	return nil
}

func (p *Sweetner) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sweetner"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Sweetner) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Sweetner) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:amount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Amount)); err != nil {
		return fmt.Errorf("%T.amount (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:amount: %s", p, err)
	}
	return err
}

func (p *Sweetner) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("units", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:units: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Units)); err != nil {
		return fmt.Errorf("%T.units (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:units: %s", p, err)
	}
	return err
}

func (p *Sweetner) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFlavor() {
		if err := oprot.WriteFieldBegin("flavor", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:flavor: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Flavor)); err != nil {
			return fmt.Errorf("%T.flavor (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:flavor: %s", p, err)
		}
	}
	return err
}

func (p *Sweetner) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sweetner(%+v)", *p)
}

type InvalidCoffee struct {
	OrderID int32  `thrift:"orderID,1,required" json:"orderID"`
	ErrorA1 string `thrift:"error,2,required" json:"error"`
}

func NewInvalidCoffee() *InvalidCoffee {
	return &InvalidCoffee{}
}

func (p *InvalidCoffee) GetOrderID() int32 {
	return p.OrderID
}

func (p *InvalidCoffee) GetErrorA1() string {
	return p.ErrorA1
}
func (p *InvalidCoffee) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidCoffee) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OrderID = v
	}
	return nil
}

func (p *InvalidCoffee) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *InvalidCoffee) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidCoffee"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidCoffee) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderID", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:orderID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OrderID)); err != nil {
		return fmt.Errorf("%T.orderID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:orderID: %s", p, err)
	}
	return err
}

func (p *InvalidCoffee) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorA1)); err != nil {
		return fmt.Errorf("%T.error (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error: %s", p, err)
	}
	return err
}

func (p *InvalidCoffee) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidCoffee(%+v)", *p)
}

func (p *InvalidCoffee) Error() string {
	return p.String()
}
